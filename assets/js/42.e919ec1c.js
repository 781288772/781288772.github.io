(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{487:function(a,t,r){"use strict";r.r(t);var v=r(17),s=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("数组合并可以说是我们在操作数组中最常遇到的场景之一！")]),a._v(" "),r("p",[a._v("本篇将简要分析三种数组合并的方法，并带来它们的性能差异分析~")]),a._v(" "),r("p",[a._v("它们是：")]),a._v(" "),r("p",[a._v("Concat")]),a._v(" "),r("p",[a._v("Push")]),a._v(" "),r("p",[a._v("Spread Syntax")]),a._v(" "),r("p",[a._v("闲言少叙，冲ヾ(◍°∇°◍)ﾉﾞ")]),a._v(" "),r("h1",{attrs:{id:"concat"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[a._v("#")]),a._v(" Concat")]),a._v(" "),r("p",[a._v("Concat 是 JavaScript 的标准方法：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。")]),a._v(" "),r("ul",[r("li",[a._v("Array.prototype.concat()")])]),a._v(" "),r("p",[a._v("array2 合并到了 array1 后面，得到了一个新的 result 数组；")]),a._v(" "),r("h1",{attrs:{id:"push"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[a._v("#")]),a._v(" Push")]),a._v(" "),r("p",[a._v("Push 也是合并数组常用方法，可将一个或多个元素添加到数组的末尾，并返回该数组的新长度。v")]),a._v(" "),r("ul",[r("li",[a._v("Array.prototype.push()")])]),a._v(" "),r("p",[a._v("与 concat 不同的时，push 方法会更改原数组，如图示，array1 发生了变化；")]),a._v(" "),r("p",[a._v("push 方法按照以上用循环的方式写，显然是不够“美妙的”，所以有了一个新的语法来支持优化它：那就是扩展运算符；")]),a._v(" "),r("h1",{attrs:{id:"spread-syntax"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spread-syntax"}},[a._v("#")]),a._v(" Spread Syntax")]),a._v(" "),r("p",[a._v("扩展运算符 (spread syntax) 是 ES6 提供的一种非常便捷的新语法，用来展开字符串，数组和对象；")]),a._v(" "),r("ul",[r("li",[a._v("arr1.push(...arr2)")])]),a._v(" "),r("p",[a._v("一行代码解决")]),a._v(" "),r("h1",{attrs:{id:"结论"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[a._v("#")]),a._v(" 结论")]),a._v(" "),r("p",[a._v("合并长度小的数组，用扩展运算符；合并长度较大的数组，用 concat！")])])}),[],!1,null,null,null);t.default=s.exports}}]);