(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{380:function(s,e,t){"use strict";t.r(e);var p=t(3),n=Object(p.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("初识 Nest")]),s._v(" "),e("p",[s._v("Nest 是一个用于构建高效，可扩展的 Node.js 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 TypeScript（但仍然允许开发人员使用纯 JavaScript 编写代码）并结合了 OOP（面向对象编程），FP（函数式编程）和 FRP（函数式响应编程）的元素。\nNest 框架底层 HTTP 平台默认是基于 Express 实现的，所以无需担心第三方库的缺失。 Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 nest 目前有两个支持开箱即用的 HTTP 平台：express 和 fastify 可以在项目中直接引入。")]),s._v(" "),e("p",[s._v("为什么选择 Nest")]),s._v(" "),e("p",[s._v("目前市面上有很多 node 框架可供大家选择。\nExpress.js 是 Node.JS 诞生之初，是一款基于Node.js以及Chrome V8引擎，快速、极简的JS服务端开发框架。\nKoa.js是一款微型Web框架，写一个hello world很简单，但web应用离不开session，视图模板，路由，文件上传，日志管理。这些 Koa 都不提供，需要自行去官方的 Middleware 寻找。然而，100个人可能找出100种搭配。\nEgg.js是基于Koa.js，解决了上述问题，将社区最佳实践整合进了Koa.js，另取名叫Egg.js，并且将多进程启动，开发时的热更新等问题一并解决了。这对开发者很友好，开箱即用，开箱即是最(较)佳配置。Egg.js发展期间，ECMAScript又推出了 async await，相比yield的语法async写起来更直。后面Koa.js也同步进行了跟进。\nMidway 是阿里团队，基于渐进式理念研发的 Node.js 框架，结合了 OOP和函数式两种编程范式。以 egg 是作为底层框架，加上了良好的TypeScript的定义支持等众多新特性,推出了Midway，有兴趣的小伙伴可以去官方文档学习一下\nNest.js 基于Express.js的全功能框架 Nest.js，他是在Express.js上封装的，充分利用了TypeScript的特性；Nest.js的优点是社区活跃，涨势喜人，截止目前在 GitHub 拥有 43.7k Star 是近期比较热门的企业级框架。\n基于支持底层支持ts与企业级和社区活跃度等综合考虑，这里我选择用nest来进行学习。各位同学可以按需选择。")]),s._v(" "),e("p",[s._v("创建项目")]),s._v(" "),e("p",[s._v("确保电脑安装了 Node.js (>= 10.13.0)")]),s._v(" "),e("p",[s._v("这里我使用的 node 版本为 v14.16.1 包用的是 yarn 管理的 版本为 1.22.17")]),s._v(" "),e("p",[s._v("$  npm i -g @nestjs/cli")]),s._v(" "),e("p",[s._v("$  nest new project-name")]),s._v(" "),e("p",[s._v("运行项目")]),s._v(" "),e("p",[s._v("$ npm run start:watch // 启动项目并监听代码变动 这里可以在package.json 中进行配置指令")]),s._v(" "),e("p",[s._v("我们可以看到服务已经启动,输入本机地址并带上端口号3000,发送一次 get 请求 则会返回 "),e("code",[s._v("Hello World")]),s._v("。")]),s._v(" "),e("p",[s._v("这里是因为在 app.controll.ts 文件中 @Get()HTTP请求装饰器告诉Nest为HTTP请求的特定端点创建处理程序。")])])}),[],!1,null,null,null);e.default=n.exports}}]);